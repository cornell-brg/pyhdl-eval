#!/usr/bin/env python
#=========================================================================
# sv-vr-analyze [options] problems
#=========================================================================
#
#  -v --verbose        Display the prompt
#  -h --help           Display this message
#  -w --wide           Display wide view
#  -c --csv            Write CSV file
#     problemdirs      List of problems to analyze
#
# Analyze the results from testing Verilog generation with
# PyMTL/Verilator. If no problemdirs are given then just searches for all
# directories in the current directory that start with Prob.
#
# Author : Christopher Batten
# Date   : Feb 22, 2024
#

import argparse
import sys
import os
import re
import glob

from dataclasses import dataclass

from adlrchat.langchain import LLMGatewayChat
from langchain.schema   import SystemMessage, HumanMessage

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  p.add_argument( "-h", "--help",     action="store_true" )
  p.add_argument( "-v", "--verbose",  action="store_true" )
  p.add_argument( "-w", "--wide",     action="store_true" )
  p.add_argument( "-c", "--csv",      type=str )
  p.add_argument( "problems", type=str, nargs="*" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Results
#-------------------------------------------------------------------------

@dataclass
class ResultRecord:
  passfail      : str    = '?'
  prompt_tokens : int    = 0
  resp_tokens   : int    = 0
  cost          : float  = 0.0

class Results:

  def __init__( self, wide ):
    self.data = {}
    self.wide = wide

  def add_result( self, problem, sample, record ):
    sample = int(sample)
    if problem not in self.data:
      self.data[problem] = [ResultRecord()]*(sample)
    while sample > len(self.data[problem]):
      self.data[problem].append(ResultRecord())
    self.data[problem][sample-1] = record

  def print( self ):

    problem_str_width = 0
    for problem in self.data:
      if len(problem) > problem_str_width:
        problem_str_width = len(problem)

    pass_rate_sum       = 0.0
    total_queries       = 0
    total_prompt_tokens = 0
    total_resp_tokens   = 0
    total_tokens        = 0
    total_cost          = 0.0

    row_strs = []
    for problem,row in self.data.items():

      npass = 0

      ntokens = 0
      row_str = ""
      for idx,record in enumerate(row):

        total_queries       += 1
        total_prompt_tokens += record.prompt_tokens
        total_resp_tokens   += record.resp_tokens
        total_cost          += record.cost

        ntokens += record.prompt_tokens
        ntokens += record.resp_tokens

        if record.passfail == ".":
          npass += 1

        if idx != 0 and idx % 5 == 0:
          row_str += " "

        row_str += record.passfail

      nsamples      = len(row)
      pass_rate     = int((npass/nsamples)*100)
      pass_rate_sum += pass_rate

      problem_str   = f"{problem:{problem_str_width}}"
      pass_rate_str = f"[{npass:02}/{nsamples:02}]({pass_rate:3}%)"

      row_strs.append(f"{problem_str} {pass_rate_str} {ntokens/1000:5.2f} {row_str:24}")

    print("")
    if not self.wide:
      for row_str in row_strs:
        print(row_str)
    else:
      if len(row_strs) % 2 != 0:
        row_strs.append("")
      half = len(row_strs)//2
      for row_str0,row_str1 in zip(row_strs[:half],row_strs[half:]):
        print(row_str0,"   ",row_str1)

    print("")
    print(f"pass_rate             = {(pass_rate_sum/len(self.data)):>10.2f}")
    print(f"total_prompt_tokens   = {total_prompt_tokens:>10}")
    print(f"total_resp_tokens     = {total_resp_tokens:>10}")
    print(f"total_tokens          = {(total_prompt_tokens+total_resp_tokens):>10}")
    print(f"avg_tokens_per_prompt = {(total_prompt_tokens/total_queries):>10.2f}")
    print(f"avg_tokens_per_resp   = {(total_resp_tokens/total_queries):>10.2f}")
    print(f"avg_tokens_per_query  = {((total_prompt_tokens+total_resp_tokens)/total_queries):>10.2f}")
    print(f"total_cost            = {total_cost:>10.2f}")
    print("")

  def write_csv( self, csv_filename ):
    with open( csv_filename, 'w' ) as file:
      for problem,row in self.data.items():

        npass = 0
        for idx,record in enumerate(row):
          if record.passfail == ".":
            npass += 1

        nsamples      = len(row)
        pass_rate     = int((npass/nsamples)*100)

        row_str = ",".join([record.passfail for record in row])

        file.write(f"{problem},{npass},{nsamples},{pass_rate/100.0},{row_str}\n")

#-------------------------------------------------------------------------
# analyze_result
#-------------------------------------------------------------------------

def analyze_result( results, problem, sample, generate_log, compile_log, verilog ):

  # record to store result information

  result_record = ResultRecord()

  # process generate log

  prompt_tokens_pattern = r"prompt_tokens\s*=\s*(\d+)"
  resp_tokens_pattern   = r"resp_tokens\s*=\s*(\d+)"
  cost_pattern          = r"cost\s*=\s*(\d+.\d+)"

  with open( generate_log, 'r' ) as file:
    for line in file:

      match = re.search(prompt_tokens_pattern,line)
      if match:
        result_record.prompt_tokens = int(match.group(1))

      match = re.search(resp_tokens_pattern,line)
      if match:
        result_record.resp_tokens = int(match.group(1))

      match = re.search(cost_pattern,line)
      if match:
        result_record.cost = float(match.group(1))

  # process compile log

  result_record.passfail = '?'
  with open( compile_log, 'r' ) as file:

    one_pass = False
    error_R  = False
    error_C  = False

    for line in file:

      # will need to add in more compile error checks here eventually

      if "PASSED" in line:
        one_pass = True

      if "FAILED" in line:
        error_R = True

      if "Fail to verilate model" in line:
        error_C = True

    if one_pass and not error_R:
      result_record.passfail = '.'

    if error_C:
      result_record.passfail = 'C'

  # process verilog to identify possible runtime issues

  if error_R and not error_C:

    with open( verilog, 'r' ) as file:

      for line in file:

        if "posedge reset" in line:
          result_record.passfail = 'r'
          break

        if "negedge reset" in line:
          result_record.passfail = 'r'
          break

        if "posedge r)" in line:
          result_record.passfail = 'r'
          break

      if result_record.passfail == '?':
        result_record.passfail = 'R'

  # final checks of the verilog file
  #  - check that there are no initial blocks
  #  - check that the verilog file is not empty
  #  - check for not using <CODE></CODE> correctly

  verilog_file_is_empty = True
  with open( verilog, 'r' ) as file:

    for line in file:

      if line.strip() != "":
        verilog_file_is_empty = False

      if "initial" in line:
        result_record.passfail = 'i'
        break

      if "PYHDL-EVAL: response did not use <CODE></CODE> correctly" in line:
        if result_record.passfail == '.':
          result_record.passfail = ';'
        break

  if verilog_file_is_empty:
    result_record.passfail = 'X'

  results.add_result( problem, sample, result_record )

#-------------------------------------------------------------------------
# main
#-------------------------------------------------------------------------

def main():

  opts = parse_cmdline()

  # If no problems are given search for directories starting with Prob

  problems = opts.problems
  if not problems:
    problems = glob.glob(f"Prob*")

  # Iterate through problem result directories

  results = Results( opts.wide )

  for problem in problems:

    problem = problem.rstrip("/")
    for filename in glob.glob(f"{problem}/{problem}_sample*-sv-vr-test.log"):

      # Extract the sample number

      nsample = re.search( r"sample(\d{2})", filename ).group(1)

      # Process logs and verilog for each sample

      generate_log = f"{problem}/{problem}_sample{nsample:02}-sv-generate.log"
      compile_log  = f"{problem}/{problem}_sample{nsample:02}-sv-vr-test.log"
      verilog      = f"{problem}/{problem}_sample{nsample:02}.v"
      analyze_result( results, problem, nsample, generate_log, compile_log, verilog )

  # Print summary

  results.print()
  if opts.csv:
    results.write_csv( opts.csv )

main()

