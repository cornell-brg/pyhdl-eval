
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  read_addr0 (3 bits)
 - output read_data0 (8 bits)
 - input  read_addr1 (3 bits)
 - output read_data1 (8 bits)
 - input  write_en
 - input  write_addr (3 bits)
 - input  write_data (8 bits)

The module should implement an 8-entry 8-bit register file with two read
ports and one write port. Both read ports should be combinational (i.e.,
the read data corresponds to the input read address on that cycle) and
writes should only occur when the write enable is high. If the write
enable is high and the write address and a read address are equal, then
the read data should be combinationally set to the write data (i.e., the
data should be forwarded from the write port to the appropriate read
port). The register file should treat register zero specially; reading
register zero should always return the value zero. Writing register zero
is valid but should have no observable effect; writing non-zero data to
register zero should _not_ result in non-zero data be forwarded to a read
of register zero. Assume all sequential logic is triggered on the
positive edge of the clock.

