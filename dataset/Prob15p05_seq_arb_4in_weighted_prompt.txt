
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  reset
 - input  preset
 - input  reqs   (4 bits)
 - output grants (4 bits)

The module should implement a 4-input weighted round-robin priority
arbiter with an active-high synchronous reset. Each bit of the input reqs
corresponds to one of the four requesters; if reqs[i] is high then this
means requester i has a valid request. The output grants is either all
zeros (meaning no requesters had a valid request on this cycle) or is a
one-hot bit vector indicating which requester won the arbitration.

The internal priority register should be reset to 0001 (i.e., requester 0
has the highest priority) when the reset input is one. When a request
wins arbitration it should have the lowest priority in the next cycle of
arbitration. For example, if requester 2 wins arbitration, then on the
next cycle the priority register should be 1000 (i.e., requester 3 has
the highest priority and requester 2 has the lowest priority). If there
are no valid requests then the priority should not change. The internal
priority register should be reset to 0001 (i.e., requester 0 has the
highest priority) when the reset input is one.

Standard round-robin arbiters exhibit strong fairness, meaning all
requesters will be served equally often when averaged over a sufficient
number of arbitrations. A weighted round-robin arbiter is specifically
designed to serve some requesters more than others. This module should
use the following weights:

 - requester 0 : 0.375
 - requester 1 : 0.375
 - requester 2 : 0.125
 - requester 3 : 0.125

Each requester should include a two-bit counter which is reset to either
3 (for requesters 0 and 1) or 1 (for requesters 2 and 3). The counter
should be decremented every time the corresponding requester wins
arbitration. When the counter reaches zero, the requester can no longer
win arbitration until the counters are preset back to their original
values by setting the input preset high. If all four counters are zero,
then no requesters will win arbitration until the counters are preset
back to their original values. Here is an example execution trace.

   cycle | preset reqs grants
  -------+----------------------------
     0   | 0      1111 0001
     1   | 0      1111 0010
     2   | 0      1111 0100
     3   | 0      1111 1000
     4   | 0      1111 0001
     5   | 0      1111 0010
     6   | 0      1111 0001
     7   | 0      1111 0010
     8   | 0      1111 0000
     9   | 0      1111 0000
    10   | 1      1111 0000
    11   | 0      1111 0001
    12   | 0      1111 0010
    13   | 0      1111 0100
    14   | 0      1111 1000
    15   | 0      1111 0001
    16   | 0      1111 0010

Assume all sequential logic is triggered on the positive edge of the
clock.

