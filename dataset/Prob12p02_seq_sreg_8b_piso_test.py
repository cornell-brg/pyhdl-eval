#=========================================================================
# Prob12p02_seq_sreg_8b_piso_test
#=========================================================================
# SPDX-License-Identifier: MIT
# Author : Christopher Batten, NVIDIA
# Date   : May 20, 2024

import pytest

from pyhdl_eval.cfg  import Config, InputPort, OutputPort
from pyhdl_eval.core import run_sim
from pyhdl_eval      import strategies as pst

from hypothesis import settings, given
from hypothesis import strategies as st

#-------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------

config = Config(
  ports = [
    ( "clk",   InputPort (1) ),
    ( "reset", InputPort (1) ),
    ( "en",    InputPort (1) ),
    ( "ld",    InputPort (1) ),
    ( "pin",   InputPort (8) ),
    ( "sout",  OutputPort(1) ),
  ],
)

#-------------------------------------------------------------------------
# test_case_single_ld
#-------------------------------------------------------------------------

def test_case_single_ld( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en ld pin
    ( 0, 0, 0, 0b0000_0000 ), #  0: 0000_0000
    ( 0, 0, 1, 0b1101_0110 ), #  1: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), #  2: 1101_0110
    ( 0, 1, 0, 0b0000_0000 ), #  3: 1010_1100
    ( 0, 1, 0, 0b0000_0000 ), #  4: 0101_1000
    ( 0, 1, 0, 0b0000_0000 ), #  5: 1011_0000
    ( 0, 1, 0, 0b0000_0000 ), #  6: 0110_0000
    ( 0, 1, 0, 0b0000_0000 ), #  7: 1100_0000
    ( 0, 1, 0, 0b0000_0000 ), #  8: 1000_0000
    ( 0, 1, 0, 0b0000_0000 ), #  9: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 10: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 11: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 12: 0000_0000
  ])

#-------------------------------------------------------------------------
# test_case_multi_ld
#-------------------------------------------------------------------------

def test_case_multi_ld( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en ld pin
    ( 0, 0, 0, 0b0000_0000 ), #  0: 0000_0000
    ( 0, 0, 1, 0b1101_0110 ), #  1: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), #  2: 1101_0110
    ( 0, 1, 0, 0b0000_0000 ), #  3: 1010_1100
    ( 0, 1, 0, 0b0000_0000 ), #  4: 0101_1000
    ( 0, 1, 0, 0b0000_0000 ), #  5: 1011_0000
    ( 0, 1, 0, 0b0000_0000 ), #  6: 0110_0000
    ( 0, 1, 0, 0b0000_0000 ), #  7: 1100_0000
    ( 0, 1, 0, 0b0000_0000 ), #  8: 1000_0000
    ( 0, 1, 0, 0b0000_0000 ), #  9: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 10: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 11: 0000_0000
    ( 0, 0, 1, 0b0110_0101 ), # 12: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 13: 0110_0101
    ( 0, 1, 0, 0b0000_0000 ), # 14: 1100_1010
    ( 0, 1, 0, 0b0000_0000 ), # 15: 1001_0100
    ( 0, 1, 0, 0b0000_0000 ), # 16: 0010_1000
    ( 0, 1, 0, 0b0000_0000 ), # 17: 0101_0000
    ( 0, 1, 0, 0b0000_0000 ), # 18: 1010_0000
    ( 0, 1, 0, 0b0000_0000 ), # 19: 0100_0000
    ( 0, 1, 0, 0b0000_0000 ), # 20: 1000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 21: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 22: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 23: 0000_0000
    ( 0, 0, 1, 0b1100_1001 ), # 24: 0000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 25: 1100_1001
    ( 0, 1, 0, 0b0000_0000 ), # 26: 1001_0010
    ( 0, 0, 1, 0b1111_1111 ), # 27: 0010_0010
    ( 0, 1, 0, 0b0000_0000 ), # 28: 1111_1111
    ( 0, 1, 0, 0b0000_0000 ), # 29: 1111_1110
    ( 0, 1, 0, 0b0000_0000 ), # 30: 1111_1100
    ( 0, 1, 0, 0b0000_0000 ), # 31: 1111_1000
    ( 0, 1, 0, 0b0000_0000 ), # 32: 1111_0000
    ( 0, 1, 0, 0b0000_0000 ), # 33: 1110_0000
    ( 0, 1, 0, 0b0000_0000 ), # 34: 1100_0000
    ( 0, 1, 0, 0b0000_0000 ), # 35: 1000_0000
    ( 0, 1, 0, 0b0000_0000 ), # 36: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 37: 0000_0000
    ( 0, 0, 0, 0b0000_0000 ), # 38: 0000_0000
  ])

#-------------------------------------------------------------------------
# test_case_enable
#-------------------------------------------------------------------------

def test_case_enable( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en ld pin
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 1, 0b1111_1111 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
  ])

#-------------------------------------------------------------------------
# test_case_directed_reset
#-------------------------------------------------------------------------

@pytest.mark.multi_reset
def test_case_directed_reset( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en ld pin
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 1, 0b1111_1111 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 1, 0, 0, 0b0000_0000 ),
    ( 1, 0, 0, 0b0000_0000 ),
    ( 1, 0, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 1, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
    ( 0, 0, 0, 0b0000_0000 ),
  ])

#-------------------------------------------------------------------------
# test_case_random
#-------------------------------------------------------------------------
# We need to make sure our random tests are long enough so we can
# observe the output of what we are shifting into the shift register.

@settings(derandomize=True,deadline=1000,max_examples=20)
@given(
  st.lists(
    st.tuples(
      st.just(0), pst.bits(1), pst.bits(1), pst.bits(8)
    ),
    min_size=20
  ))
def test_case_random( pytestconfig, test_vectors ):
  run_sim( pytestconfig, __file__, config, test_vectors )

