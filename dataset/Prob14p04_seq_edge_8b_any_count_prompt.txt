
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  reset
 - input  clear
 - input  in_   (8 bits)
 - output count (8 bits)

The module should implement an edge counter that counts the total number
of times any input bit changes from one clock cycle to the next. The
module should count both positive edges (0 to 1 transitions) and negative
edges (1 to 0 transitions). When the count reaches the maximum value it
should wrap-around. The internal counter register should be directly
connected to the output port. Here is an example execution trace. An X
indicates that the output bit is undefined because it is the first cycle
and thus there is no previous cycle.

   cycle | in_       out
  -------+---------------------
     0   | 0000_0000  X
     1   | 0000_0000  0
     2   | 0001_0001  0
     3   | 0101_0101  2
     4   | 0001_0001  4
     5   | 0100_0100  6
     6   | 0000_0000 10
     7   | 0000_0000 12
     8   | 0000_0000 12

All internal state should be set to zero when either the reset input or
the clear input are one. Assume all sequential logic is triggered on the
positive edge of the clock.

