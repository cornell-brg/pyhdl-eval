
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  reset
 - input  reqs   (4 bits)
 - output grants (4 bits)

The module should implement a 4-input oblivious rotating priority
arbiter with an active-high synchronous reset. Each bit of the input reqs
corresponds to one of the four requesters; if reqs[i] is high then this
means requester i has a valid request. The output grants is either all
zeros (meaning no requesters had a valid request on this cycle) or is a
one-hot bit vector indicating which requester won the arbitration.

The internal priority register should be reset to 0001 (i.e., requester 0
has the highest priority) when the reset input is one. Every cycle the
highest priority requester to should rotate to the left. So the cycle
after the arbiter is reset, the priority is 0001, two cycles after the
arbiter is reset the priority is 0010, and so on. Since this is an
oblivious arbiter, the priority rotates regardless of which requester
wins arbitration or indeed if there are any valid requests at all. Here
is an example execution trace.

   cycle | reqs grants
  -------+---------------------
     0   | 1111 0001
     1   | 1111 0010
     2   | 1111 0100
     3   | 1111 1000
     4   | 1111 0001
     5   | 0000 0000
     6   | 1111 0100
     7   | 0000 0000
     8   | 0000 0000
     9   | 1111 0010

Assume all sequential logic is triggered on the positive edge of the
clock.

