#=========================================================================
# Prob12p01_seq_sreg_8b_siso_test
#=========================================================================
# SPDX-License-Identifier: MIT
# Author : Christopher Batten, NVIDIA
# Date   : May 20, 2024

import pytest

from pyhdl_eval.cfg  import Config, InputPort, OutputPort
from pyhdl_eval.core import run_sim
from pyhdl_eval      import strategies as pst

from hypothesis import settings, given
from hypothesis import strategies as st

#-------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------

config = Config(
  ports = [
    ( "clk",   InputPort (1) ),
    ( "reset", InputPort (1) ),
    ( "en",    InputPort (1) ),
    ( "sin",   InputPort (1) ),
    ( "sout",  OutputPort(1) ),
  ],
)

#-------------------------------------------------------------------------
# test_case_single_one
#-------------------------------------------------------------------------

def test_case_single_one( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en si
    ( 0, 0, 0 ), #  0: 0000_0000
    ( 0, 1, 1 ), #  1: 0000_0000
    ( 0, 1, 0 ), #  2: 0000_0001
    ( 0, 1, 0 ), #  3: 0000_0010
    ( 0, 1, 0 ), #  4: 0000_0100
    ( 0, 1, 0 ), #  5: 0000_1000
    ( 0, 1, 0 ), #  6: 0001_0000
    ( 0, 1, 0 ), #  7: 0010_0000
    ( 0, 1, 0 ), #  8: 0100_0000
    ( 0, 1, 0 ), #  9: 1000_0000
    ( 0, 1, 0 ), # 10: 0000_0000
    ( 0, 0, 0 ), # 11: 0000_0000
    ( 0, 0, 0 ), # 12: 0000_0000
  ])

#-------------------------------------------------------------------------
# test_case_many_ones
#-------------------------------------------------------------------------

def test_case_many_ones( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en si
    ( 0, 0, 0 ), #  0: 0000_0000
    ( 0, 1, 1 ), #  1: 0000_0000
    ( 0, 1, 0 ), #  2: 0000_0001
    ( 0, 1, 1 ), #  3: 0000_0010
    ( 0, 1, 0 ), #  4: 0000_0101
    ( 0, 1, 1 ), #  5: 0000_1010
    ( 0, 1, 0 ), #  6: 0001_0101
    ( 0, 1, 1 ), #  7: 0010_1010
    ( 0, 1, 0 ), #  8: 0101_0101
    ( 0, 1, 1 ), #  9: 1010_1010
    ( 0, 1, 0 ), # 10: 0101_0101
    ( 0, 1, 0 ), # 11: 1010_1010
    ( 0, 1, 0 ), # 12: 0101_0100
    ( 0, 1, 0 ), # 13: 1010_1000
  ])

#-------------------------------------------------------------------------
# test_case_enable
#-------------------------------------------------------------------------

def test_case_enable( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en si
    ( 0, 0, 0 ), #  0: 0000_0000
    ( 0, 1, 1 ), #  1: 0000_0000
    ( 0, 1, 1 ), #  2: 0000_0001
    ( 0, 0, 1 ), #  3: 0000_0011
    ( 0, 0, 1 ), #  4: 0000_0011
    ( 0, 0, 1 ), #  5: 0000_0011
    ( 0, 0, 1 ), #  6: 0000_0011
    ( 0, 0, 1 ), #  7: 0000_0011
    ( 0, 0, 1 ), #  8: 0000_0011
    ( 0, 0, 1 ), #  9: 0000_0011
    ( 0, 0, 1 ), # 10: 0000_0011
    ( 0, 0, 1 ), # 11: 0000_0011
    ( 0, 0, 1 ), # 12: 0000_0011
    ( 0, 0, 1 ), # 13: 0000_0011
  ])

#-------------------------------------------------------------------------
# test_case_directed_reset
#-------------------------------------------------------------------------

@pytest.mark.multi_reset
def test_case_directed_reset( pytestconfig ):
  run_sim( pytestconfig, __file__, config,
  [ # rs en si
    ( 0, 0, 0 ), #  0: 0000_0000
    ( 0, 1, 1 ), #  1: 0000_0000
    ( 0, 1, 1 ), #  2: 0000_0001
    ( 0, 1, 1 ), #  3: 0000_0011
    ( 0, 1, 1 ), #  4: 0000_0111
    ( 0, 1, 1 ), #  5: 0000_1111
    ( 0, 1, 1 ), #  6: 0001_1111
    ( 0, 1, 1 ), #  7: 0011_1111
    ( 0, 1, 1 ), #  8: 0111_1111
    ( 0, 1, 1 ), #  9: 1111_1111
    ( 0, 1, 1 ), # 10: 1111_1111
    ( 0, 1, 1 ), # 11: 1111_1111
    ( 1, 1, 1 ), # 12: 1111_1111
    ( 1, 1, 1 ), # 13: 0000_0000
    ( 1, 1, 1 ), # 14: 0000_0000
    ( 0, 1, 1 ), # 15: 0000_0000
    ( 0, 1, 1 ), # 16: 0000_0001
    ( 0, 1, 1 ), # 17: 0000_0011
    ( 0, 1, 1 ), # 18: 0000_0111
    ( 0, 1, 1 ), # 19: 0000_1111
    ( 0, 1, 1 ), # 20: 0001_1111
    ( 0, 1, 1 ), # 21: 0011_1111
    ( 0, 1, 1 ), # 22: 0111_1111
    ( 0, 1, 1 ), # 23: 1111_1111
    ( 0, 1, 1 ), # 24: 1111_1111
  ])

#-------------------------------------------------------------------------
# test_case_random
#-------------------------------------------------------------------------
# We need to make sure our random tests are long enough so we can
# observe the output of what we are shifting into the shift register.

@settings(deadline=1000,max_examples=20)
@given( st.lists(
  st.tuples( st.just(0), pst.bits(1), pst.bits(1) ), min_size=20 ))
def test_case_random( pytestconfig, test_vectors ):
  run_sim( pytestconfig, __file__, config, test_vectors )

