
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  in_ (8 bits)
 - output out (8 bits)

The module should implement an 8-bit edge detector that will detect when
an input bit changes from one clock cycle to the next. The module should
detect both positive edges (0 to 1 transitions) and negative edges (1 to
0 transitions). Output out[i] should be (combinationally) set to zero if
in_[i] has not changed from the previous to the current cycle; output
out[i] should be (combinationally) set to one if in_[i] has changed from
the previous to the current cycle. Here is an example execution trace. An
x indicates that the output bit is undefined because it is the first
cycle and thus there is no previous cycle.

   cycle | in_       out
  -------+---------------------
     0   | 0000_0000 xxxx_xxxx
     1   | 0000_0000 0000_0000
     2   | 0001_0001 0001_0001
     3   | 0101_0101 0100_0100
     4   | 0001_0001 0100_0100
     5   | 0100_0100 0101_0101
     6   | 0000_0000 0100_0100
     7   | 0000_0000 0000_0000

Assume all sequential logic is triggered on the positive edge of the
clock.

