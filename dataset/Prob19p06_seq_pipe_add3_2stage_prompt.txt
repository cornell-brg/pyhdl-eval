
Implement a hardware module named TopModule with the following interface.
All input and output ports are one bit unless otherwise specified.

 - input  clk
 - input  in0   (8 bits)
 - input  in1   (8 bits)
 - input  in2   (8 bits)
 - output out01 (8 bits)
 - output out   (8 bits)

The module should implement a two-stage pipelined three-input adder. Just
the first addition of in0 and in1 should occur during the first stage,
and then the second addition of this first sum and input in2 should occur
during the second stage. The final result should be written to the output
out at the end of the second stage. The module should write output out01
with the result of the first addition at the end of the first stage.

All transactions should have a two cycle latency (i.e., inputs on cycle i
will produce the corresponding sum on cycle i+2). The module should be
able to achieve full throughput, i.e., it should be able to accept new
inputs every cycle and produce a valid output every cycle. Here is an
example execution trace. An X indicates that the output is undefined
because there is no reset signal for the pipeline registers.

   cycle | in0 in1 in2 out01 out
  -------+-----------------------
     0   | 00  00  00  XX    XX
     1   | 01  02  04  00    XX
     2   | 02  03  04  03    00
     3   | 03  04  05  05    07
     4   | 00  00  00  07    09
     5   | 00  00  00  00    0c
     6   | 00  00  00  00    00

Assume all sequential logic is triggered on the positive edge of the
clock.

